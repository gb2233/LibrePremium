package xyz.kyngs.librepremium.common.config;

import xyz.kyngs.librepremium.common.config.key.ConfigurationKey;

import java.util.List;

/**
 * All the keys for the configuration.
 * BTW: Most of the comments were generated by GitHub's Copilot :D
 */
public class DefaultConfiguration {

    public static final ConfigurationKey<List<String>> ALLOWED_COMMANDS_WHILE_UNAUTHORIZED = new ConfigurationKey<>(
            "allowed-commands-while-unauthorized",
            List.of(
                    "login",
                    "register",
                    "2fa"
            ),
            "Commands that are allowed while the user is not authorized.",
            ConfigurateHelper::getStringList
    );

    public static final ConfigurationKey<List<String>> LIMBO = new ConfigurationKey<>(
            "limbo",
            List.of("limbo0", "limbo1"),
            "The limbos, players should be sent to, when not authenticated. THIS SERVER MUST BE REGISTERED IN THE PROXY CONFIG",
            ConfigurateHelper::getStringList
    );

    public static final ConfigurationKey<List<String>> PASS_THROUGH = new ConfigurationKey<>(
            "pass-through",
            List.of(
                    "lobby0",
                    "lobby1"
            ),
            "The server, player should be sent to, after they're authenticated. THIS SERVER MUST BE REGISTERED IN THE PROXY CONFIG",
            ConfigurateHelper::getStringList
    );

    public static final ConfigurationKey<String> DEFAULT_CRYPTO_PROVIDER = new ConfigurationKey<>(
            "default-crypto-provider",
            "BCrypt-2A",
            """
                    The default crypto provider. This is used for hashing passwords. Available Providers:
                    SHA-256 - Older, not recommended. Kept for compatibility reasons.
                    SHA-512 - More safer than SHA-256, but still not recommended. Kept for compatibility reasons.
                    BCrypt-2A - Newer, more safe, recommended
                    """,
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<Boolean> KICK_ON_WRONG_PASSWORD = new ConfigurationKey<>(
            "kick-on-wrong-password",
            false,
            "Kick the player, if the password is wrong.",
            ConfigurateHelper::getBoolean
    );

    public static final ConfigurationKey<Boolean> USE_TITLES = new ConfigurationKey<>(
            "use-titles",
            true,
            "Whether or not to use titles when player is awaiting authentication.",
            ConfigurateHelper::getBoolean
    );

    public static final ConfigurationKey<String> NEW_UUID_CREATOR = new ConfigurationKey<>(
            "new-uuid-creator",
            "RANDOM",
            """
                    Sets which method should be used for creating fixed UUID when a new player is created.
                    See the wiki for further information: https://github.com/kyngs/LibrePremium/wiki/UUID-Creators
                    Available Creators:
                    RANDOM - Generates a random UUID
                    CRACKED - Generates a UUID based on the player's name, the same method as if the server was in offline mode
                    MOJANG - If the player exists in the Mojang's database, it will be used. Otherwise, CRACKED will be used.
                    """,
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<Boolean> AUTO_REGISTER = new ConfigurationKey<>(
            "auto-register",
            false,
            """
                    Should we automatically register all players with a premium nickname?
                    !!CRACKED PLAYERS WILL NOT BE ABLE TO REGISTER PREMIUM USERNAMES!!
                    """,
            ConfigurateHelper::getBoolean
    );

    public static final ConfigurationKey<Integer> MILLISECONDS_TO_REFRESH_NOTIFICATION = new ConfigurationKey<>(
            "milliseconds-to-refresh-notification",
            10000,
            """
                    This specifies how often players should be notified when not authenticated. Set to negative to disable.
                    This includes (but is not limited to):
                    - Message in chat
                    - Title
                    """,
            ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<Integer> SECONDS_TO_AUTHORIZE = new ConfigurationKey<>(
            "seconds-to-authorize",
            -1,
            "Sets the login/register time limit in seconds. Set to negative to disable.",
            ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<?> DATABASE = ConfigurationKey.comment(
            "database",
            "This section is used for MySQL database configuration."
    );

    public static final ConfigurationKey<String> DATABASE_HOST = new ConfigurationKey<>(
            "database.host",
            "localhost",
            "The host of the database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<String> DATABASE_NAME = new ConfigurationKey<>(
            "database.database",
            "librepremium",
            "The name of the database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<String> DATABASE_PASSWORD = new ConfigurationKey<>(
            "database.password",
            "",
            "The password of the database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<Integer> DATABASE_PORT = new ConfigurationKey<>(
            "database.port",
            3306,
            "The port of the database.",
            ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<String> DATABASE_USER = new ConfigurationKey<>(
            "database.user",
            "root",
            "The user of the database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<?> MIGRATION = ConfigurationKey.comment(
            "migration",
            """
                    This is used for migrating the database from other plugins.
                    Please see the wiki for further information: https://github.com/kyngs/LibrePremium/wiki/Database-Migration
                    """
    );

    public static final ConfigurationKey<Boolean> MIGRATION_ON_NEXT_STARTUP = new ConfigurationKey<>(
            "migration.on-next-startup",
            false,
            "Migrate the database on the next startup.",
            ConfigurateHelper::getBoolean
    );

    public static final ConfigurationKey<String> MIGRATION_TYPE = new ConfigurationKey<>(
            "migration.type",
            "",
            """
                    The type of the migration. Available Types:
                    JPremium - Can convert from JPremium SHA256 and BCrypt
                    AuthMe - Can convert from AuthMe BCrypt and SHA256
                    Aegis - Can convert from Aegis BCrypt
                    DBA-SHA-512 - Can convert from DynamicBungeeAuth, which was configured to use SHA-512
                    """,
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<String> MIGRATION_OLD_DATABASE_HOST = new ConfigurationKey<>(
            "migration.old-database.host",
            "localhost",
            "The host of the old database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<String> MIGRATION_OLD_DATABASE_NAME = new ConfigurationKey<>(
            "migration.old-database.database",
            "",
            "The name of the old database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<String> MIGRATION_OLD_DATABASE_PASSWORD = new ConfigurationKey<>(
            "migration.old-database.password",
            "",
            "The password of the old database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<Integer> MIGRATION_OLD_DATABASE_PORT = new ConfigurationKey<>(
            "migration.old-database.port",
            3306,
            "The port of the old database.",
            ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<String> MIGRATION_OLD_DATABASE_USER = new ConfigurationKey<>(
            "migration.old-database.user",
            "root",
            "The user of the old database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<String> MIGRATION_OLD_DATABASE_TABLE = new ConfigurationKey<>(
            "migration.old-database.table",
            "user-data",
            "The table of the old database.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<?> TOTP = ConfigurationKey.comment(
            "totp",
            """
                    This section is used for 2FA configuration.
                    !! YOU MUST HAVE PROTOCOLIZE INSTALLED FOR THIS TO WORK !!
                                        
                    You can find more information on the wiki: https://github.com/kyngs/LibrePremium/wiki/2FA
                    """
    );

    public static final ConfigurationKey<Boolean> TOTP_ENABLED = new ConfigurationKey<>(
            "totp.enabled",
            true,
            """
                    Should we enable TOTP-Based Two-Factor Authentication? If you don't know what this is, this is the 2FA used in applications like Google Authenticator etc.
                    I heavily suggest you to read this wiki page: https://github.com/kyngs/LibrePremium/wiki/2FA
                    """,
            ConfigurateHelper::getBoolean
    );

    public static final ConfigurationKey<String> TOTP_LABEL = new ConfigurationKey<>(
            "totp.label",
            "LibrePremium Network",
            "The label to be displayed in the 2FA app. Change this to your network name.",
            ConfigurateHelper::getString
    );

    public static final ConfigurationKey<Integer> MINIMUM_PASSWORD_LENGTH = new ConfigurationKey<>(
        "minimum-password-length",
        -1,
        "The minimum length of a password. Set to negative to disable.",
        ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<Integer> MAXIMUM_PASSWORD_LENGTH = new ConfigurationKey<>(
        "maximum-password-length",
        128,
        "The maximum length of a password. Set to negative to disable.",
        ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<Integer> MAX_REG_PER_IP = new ConfigurationKey<>(
        "max-reg-per-ip",
        5,
        "The maximum registrations from a single IP. Set to negative to disable.",
        ConfigurateHelper::getInt
    );

    public static final ConfigurationKey<Boolean> PREMIUM_ENABLED = new ConfigurationKey<>(
        "premium.enabled",
        true,
        "If premium nick checking and autologin is enabled",
        ConfigurateHelper::getBoolean
    );
    public static final ConfigurationKey<Boolean> TEMPBAN_ENABLED = new ConfigurationKey<>(
        "tempban.enabled",
        false,
        "If enabled, then after multiple login tries the offending IP will get banned",
        ConfigurateHelper::getBoolean
    );

    public static final ConfigurationKey<String> TEMPBAN_COMMAND = new ConfigurationKey<>(
        "tempban.command",
        "gtempbanip %ip% %duration% %reason%",
        "Command used for the tempbans.",
        ConfigurateHelper::getString
    );
    public static final ConfigurationKey<Integer> TEMPBAN_MAXTRIES = new ConfigurationKey<>(
        "tempban.maxtries",
        15,
        "Maximum attempts before ip ban.",
        ConfigurateHelper::getInt
    );
    public static final ConfigurationKey<String> TEMPBAN_LENGTH = new ConfigurationKey<>(
        "tempban.length",
        "480min",
        "Ban length in minutes.",
        ConfigurateHelper::getString
    );
    public static final ConfigurationKey<Integer> TEMPBAN_COUNTER_RESET = new ConfigurationKey<>(
        "tempban.minutesBeforeCounterReset",
        240,
        "Time before the tries reset to 0.",
        ConfigurateHelper::getInt
    );

}
